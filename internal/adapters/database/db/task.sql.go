// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task.sql

package db

import (
	"context"
	"database/sql"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (title, description, status, priority, due_date, activity_id)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING id, title, description, status, priority, due_date, activity_id, created_at, updated_at
`

type CreateTaskParams struct {
	Title       string
	Description sql.NullString
	Status      string
	Priority    string
	DueDate     sql.NullTime
	ActivityID  int32
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.DueDate,
		arg.ActivityID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.ActivityID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id = $1
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, title, description, status, priority, due_date, activity_id, created_at, updated_at FROM tasks WHERE id = $1
`

func (q *Queries) GetTask(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.ActivityID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, description, status, priority, due_date, activity_id, created_at, updated_at
FROM tasks
WHERE activity_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListTasksParams struct {
	ActivityID int32
	Limit      int32
	Offset     int32
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, arg.ActivityID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.Priority,
			&i.DueDate,
			&i.ActivityID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET description=$2, status=$3, priority=$4, due_date=$5, updated_at=CURRENT_TIMESTAMP
WHERE id=$1
RETURNING id, title, description, status, priority, due_date, activity_id, created_at, updated_at
`

type UpdateTaskParams struct {
	ID          int32
	Description sql.NullString
	Status      string
	Priority    string
	DueDate     sql.NullTime
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.ID,
		arg.Description,
		arg.Status,
		arg.Priority,
		arg.DueDate,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.Priority,
		&i.DueDate,
		&i.ActivityID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
