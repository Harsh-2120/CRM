// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: taxation.sql

package db

import (
	"context"
	"database/sql"
)

const createTaxationDetail = `-- name: CreateTaxationDetail :one
INSERT INTO taxation_details (country, tax_type, rate, description)
VALUES ($1,$2,$3,$4)
RETURNING id, country, tax_type, rate, description, created_at, updated_at
`

type CreateTaxationDetailParams struct {
	Country     string
	TaxType     string
	Rate        string
	Description sql.NullString
}

func (q *Queries) CreateTaxationDetail(ctx context.Context, arg CreateTaxationDetailParams) (TaxationDetail, error) {
	row := q.db.QueryRowContext(ctx, createTaxationDetail,
		arg.Country,
		arg.TaxType,
		arg.Rate,
		arg.Description,
	)
	var i TaxationDetail
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.TaxType,
		&i.Rate,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTaxationDetail = `-- name: DeleteTaxationDetail :exec
DELETE FROM taxation_details WHERE id = $1
`

func (q *Queries) DeleteTaxationDetail(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTaxationDetail, id)
	return err
}

const getTaxationDetail = `-- name: GetTaxationDetail :one
SELECT id, country, tax_type, rate, description, created_at, updated_at FROM taxation_details WHERE id = $1
`

func (q *Queries) GetTaxationDetail(ctx context.Context, id int32) (TaxationDetail, error) {
	row := q.db.QueryRowContext(ctx, getTaxationDetail, id)
	var i TaxationDetail
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.TaxType,
		&i.Rate,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTaxationDetails = `-- name: ListTaxationDetails :many
SELECT id, country, tax_type, rate, description, created_at, updated_at FROM taxation_details
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListTaxationDetailsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListTaxationDetails(ctx context.Context, arg ListTaxationDetailsParams) ([]TaxationDetail, error) {
	rows, err := q.db.QueryContext(ctx, listTaxationDetails, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaxationDetail
	for rows.Next() {
		var i TaxationDetail
		if err := rows.Scan(
			&i.ID,
			&i.Country,
			&i.TaxType,
			&i.Rate,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaxationDetail = `-- name: UpdateTaxationDetail :one
UPDATE taxation_details
SET tax_type=$2, rate=$3, description=$4, updated_at=CURRENT_TIMESTAMP
WHERE id=$1
RETURNING id, country, tax_type, rate, description, created_at, updated_at
`

type UpdateTaxationDetailParams struct {
	ID          int32
	TaxType     string
	Rate        string
	Description sql.NullString
}

func (q *Queries) UpdateTaxationDetail(ctx context.Context, arg UpdateTaxationDetailParams) (TaxationDetail, error) {
	row := q.db.QueryRowContext(ctx, updateTaxationDetail,
		arg.ID,
		arg.TaxType,
		arg.Rate,
		arg.Description,
	)
	var i TaxationDetail
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.TaxType,
		&i.Rate,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
