// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: activity.sql

package db

import (
	"context"
	"database/sql"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO activities (title, description, type, status, due_date, contact_id)
VALUES ($1,$2,$3,$4,$5,$6)
RETURNING id, title, description, type, status, due_date, contact_id, created_at, updated_at
`

type CreateActivityParams struct {
	Title       string
	Description sql.NullString
	Type        string
	Status      string
	DueDate     sql.NullTime
	ContactID   int32
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, createActivity,
		arg.Title,
		arg.Description,
		arg.Type,
		arg.Status,
		arg.DueDate,
		arg.ContactID,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Type,
		&i.Status,
		&i.DueDate,
		&i.ContactID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteActivity = `-- name: DeleteActivity :exec
DELETE FROM activities WHERE id = $1
`

func (q *Queries) DeleteActivity(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteActivity, id)
	return err
}

const getActivity = `-- name: GetActivity :one
SELECT id, title, description, type, status, due_date, contact_id, created_at, updated_at FROM activities WHERE id = $1
`

func (q *Queries) GetActivity(ctx context.Context, id int32) (Activity, error) {
	row := q.db.QueryRowContext(ctx, getActivity, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Type,
		&i.Status,
		&i.DueDate,
		&i.ContactID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActivities = `-- name: ListActivities :many
SELECT id, title, description, type, status, due_date, contact_id, created_at, updated_at FROM activities
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListActivitiesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListActivities(ctx context.Context, arg ListActivitiesParams) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, listActivities, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Type,
			&i.Status,
			&i.DueDate,
			&i.ContactID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActivity = `-- name: UpdateActivity :one
UPDATE activities
SET description=$2, status=$3, due_date=$4, updated_at=CURRENT_TIMESTAMP
WHERE id=$1
RETURNING id, title, description, type, status, due_date, contact_id, created_at, updated_at
`

type UpdateActivityParams struct {
	ID          int32
	Description sql.NullString
	Status      string
	DueDate     sql.NullTime
}

func (q *Queries) UpdateActivity(ctx context.Context, arg UpdateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, updateActivity,
		arg.ID,
		arg.Description,
		arg.Status,
		arg.DueDate,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Type,
		&i.Status,
		&i.DueDate,
		&i.ContactID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
