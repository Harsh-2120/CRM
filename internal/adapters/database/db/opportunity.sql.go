// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: opportunity.sql

package db

import (
	"context"
	"database/sql"
)

const createOpportunity = `-- name: CreateOpportunity :one
INSERT INTO opportunities (name, description, stage, amount, close_date, probability, lead_id, account_id, owner_id)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9)
RETURNING id, name, description, stage, amount, close_date, probability, lead_id, account_id, owner_id, created_at, updated_at
`

type CreateOpportunityParams struct {
	Name        sql.NullString
	Description sql.NullString
	Stage       sql.NullString
	Amount      sql.NullString
	CloseDate   sql.NullTime
	Probability sql.NullString
	LeadID      sql.NullInt32
	AccountID   sql.NullInt32
	OwnerID     sql.NullInt32
}

func (q *Queries) CreateOpportunity(ctx context.Context, arg CreateOpportunityParams) (Opportunity, error) {
	row := q.db.QueryRowContext(ctx, createOpportunity,
		arg.Name,
		arg.Description,
		arg.Stage,
		arg.Amount,
		arg.CloseDate,
		arg.Probability,
		arg.LeadID,
		arg.AccountID,
		arg.OwnerID,
	)
	var i Opportunity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Stage,
		&i.Amount,
		&i.CloseDate,
		&i.Probability,
		&i.LeadID,
		&i.AccountID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOpportunity = `-- name: DeleteOpportunity :exec
DELETE FROM opportunities WHERE id = $1
`

func (q *Queries) DeleteOpportunity(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOpportunity, id)
	return err
}

const getOpportunity = `-- name: GetOpportunity :one
SELECT id, name, description, stage, amount, close_date, probability, lead_id, account_id, owner_id, created_at, updated_at FROM opportunities WHERE id = $1
`

func (q *Queries) GetOpportunity(ctx context.Context, id int32) (Opportunity, error) {
	row := q.db.QueryRowContext(ctx, getOpportunity, id)
	var i Opportunity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Stage,
		&i.Amount,
		&i.CloseDate,
		&i.Probability,
		&i.LeadID,
		&i.AccountID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOpportunities = `-- name: ListOpportunities :many
SELECT id, name, description, stage, amount, close_date, probability, lead_id, account_id, owner_id, created_at, updated_at FROM opportunities
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListOpportunitiesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListOpportunities(ctx context.Context, arg ListOpportunitiesParams) ([]Opportunity, error) {
	rows, err := q.db.QueryContext(ctx, listOpportunities, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Opportunity
	for rows.Next() {
		var i Opportunity
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Stage,
			&i.Amount,
			&i.CloseDate,
			&i.Probability,
			&i.LeadID,
			&i.AccountID,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOpportunity = `-- name: UpdateOpportunity :one
UPDATE opportunities
SET stage=$2, amount=$3, probability=$4, updated_at=CURRENT_TIMESTAMP
WHERE id=$1
RETURNING id, name, description, stage, amount, close_date, probability, lead_id, account_id, owner_id, created_at, updated_at
`

type UpdateOpportunityParams struct {
	ID          int32
	Stage       sql.NullString
	Amount      sql.NullString
	Probability sql.NullString
}

func (q *Queries) UpdateOpportunity(ctx context.Context, arg UpdateOpportunityParams) (Opportunity, error) {
	row := q.db.QueryRowContext(ctx, updateOpportunity,
		arg.ID,
		arg.Stage,
		arg.Amount,
		arg.Probability,
	)
	var i Opportunity
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Stage,
		&i.Amount,
		&i.CloseDate,
		&i.Probability,
		&i.LeadID,
		&i.AccountID,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
