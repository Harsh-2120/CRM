// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: lead.sql

package db

import (
	"context"
	"database/sql"
)

const createLead = `-- name: CreateLead :one
INSERT INTO leads (first_name, last_name, email, phone, status, assigned_to, organization_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, first_name, last_name, email, phone, status, assigned_to, organization_id, created_at, updated_at
`

type CreateLeadParams struct {
	FirstName      string
	LastName       string
	Email          string
	Phone          sql.NullString
	Status         string
	AssignedTo     sql.NullInt32
	OrganizationID sql.NullInt32
}

func (q *Queries) CreateLead(ctx context.Context, arg CreateLeadParams) (Lead, error) {
	row := q.db.QueryRowContext(ctx, createLead,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Status,
		arg.AssignedTo,
		arg.OrganizationID,
	)
	var i Lead
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Status,
		&i.AssignedTo,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLead = `-- name: DeleteLead :exec
DELETE FROM leads WHERE id = $1
`

func (q *Queries) DeleteLead(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteLead, id)
	return err
}

const getLead = `-- name: GetLead :one
SELECT id, first_name, last_name, email, phone, status, assigned_to, organization_id, created_at, updated_at FROM leads WHERE id = $1
`

func (q *Queries) GetLead(ctx context.Context, id int32) (Lead, error) {
	row := q.db.QueryRowContext(ctx, getLead, id)
	var i Lead
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Status,
		&i.AssignedTo,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLeads = `-- name: ListLeads :many
SELECT id, first_name, last_name, email, phone, status, assigned_to, organization_id, created_at, updated_at FROM leads
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListLeadsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListLeads(ctx context.Context, arg ListLeadsParams) ([]Lead, error) {
	rows, err := q.db.QueryContext(ctx, listLeads, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lead
	for rows.Next() {
		var i Lead
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.Status,
			&i.AssignedTo,
			&i.OrganizationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLead = `-- name: UpdateLead :one
UPDATE leads
SET status=$2, assigned_to=$3, updated_at=CURRENT_TIMESTAMP
WHERE id=$1
RETURNING id, first_name, last_name, email, phone, status, assigned_to, organization_id, created_at, updated_at
`

type UpdateLeadParams struct {
	ID         int32
	Status     string
	AssignedTo sql.NullInt32
}

func (q *Queries) UpdateLead(ctx context.Context, arg UpdateLeadParams) (Lead, error) {
	row := q.db.QueryRowContext(ctx, updateLead, arg.ID, arg.Status, arg.AssignedTo)
	var i Lead
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Status,
		&i.AssignedTo,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
