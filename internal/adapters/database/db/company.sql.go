// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: company.sql

package db

import (
	"context"
	"database/sql"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (
    name, industry, website, phone, email, address, city, state, country, zipcode, created_by, organization_id
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
RETURNING id, name, industry, website, phone, email, address, city, state, country, zipcode, created_by, organization_id, created_at, updated_at
`

type CreateCompanyParams struct {
	Name           string
	Industry       sql.NullString
	Website        sql.NullString
	Phone          sql.NullString
	Email          sql.NullString
	Address        sql.NullString
	City           sql.NullString
	State          sql.NullString
	Country        sql.NullString
	Zipcode        sql.NullString
	CreatedBy      sql.NullInt32
	OrganizationID sql.NullInt32
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany,
		arg.Name,
		arg.Industry,
		arg.Website,
		arg.Phone,
		arg.Email,
		arg.Address,
		arg.City,
		arg.State,
		arg.Country,
		arg.Zipcode,
		arg.CreatedBy,
		arg.OrganizationID,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Industry,
		&i.Website,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.Zipcode,
		&i.CreatedBy,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM companies WHERE id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, id)
	return err
}

const getCompany = `-- name: GetCompany :one
SELECT id, name, industry, website, phone, email, address, city, state, country, zipcode, created_by, organization_id, created_at, updated_at FROM companies WHERE id = $1
`

func (q *Queries) GetCompany(ctx context.Context, id int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompany, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Industry,
		&i.Website,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.Zipcode,
		&i.CreatedBy,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, name, industry, website, phone, email, address, city, state, country, zipcode, created_by, organization_id, created_at, updated_at FROM companies
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListCompaniesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListCompanies(ctx context.Context, arg ListCompaniesParams) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, listCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Industry,
			&i.Website,
			&i.Phone,
			&i.Email,
			&i.Address,
			&i.City,
			&i.State,
			&i.Country,
			&i.Zipcode,
			&i.CreatedBy,
			&i.OrganizationID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE companies
SET name = $2, industry = $3, website = $4, phone = $5, email = $6, address = $7, city = $8, state = $9, country = $10,
    zipcode = $11, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, industry, website, phone, email, address, city, state, country, zipcode, created_by, organization_id, created_at, updated_at
`

type UpdateCompanyParams struct {
	ID       int32
	Name     string
	Industry sql.NullString
	Website  sql.NullString
	Phone    sql.NullString
	Email    sql.NullString
	Address  sql.NullString
	City     sql.NullString
	State    sql.NullString
	Country  sql.NullString
	Zipcode  sql.NullString
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, updateCompany,
		arg.ID,
		arg.Name,
		arg.Industry,
		arg.Website,
		arg.Phone,
		arg.Email,
		arg.Address,
		arg.City,
		arg.State,
		arg.Country,
		arg.Zipcode,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Industry,
		&i.Website,
		&i.Phone,
		&i.Email,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.Zipcode,
		&i.CreatedBy,
		&i.OrganizationID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
