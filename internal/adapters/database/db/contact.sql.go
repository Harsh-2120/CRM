// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contact.sql

package db

import (
	"context"
	"database/sql"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (
    contact_type, first_name, last_name, company_name, company_id, email, phone,
    address, city, state, country, zipcode, position, social_media_profiles, notes, taxation_detail_id
) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16)
RETURNING id, contact_type, first_name, last_name, company_name, company_id, email, phone, address, city, state, country, zipcode, position, social_media_profiles, notes, taxation_detail_id, created_at, updated_at
`

type CreateContactParams struct {
	ContactType         string
	FirstName           sql.NullString
	LastName            sql.NullString
	CompanyName         sql.NullString
	CompanyID           sql.NullInt32
	Email               string
	Phone               sql.NullString
	Address             sql.NullString
	City                sql.NullString
	State               sql.NullString
	Country             sql.NullString
	Zipcode             sql.NullString
	Position            sql.NullString
	SocialMediaProfiles sql.NullString
	Notes               sql.NullString
	TaxationDetailID    sql.NullInt32
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.ContactType,
		arg.FirstName,
		arg.LastName,
		arg.CompanyName,
		arg.CompanyID,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.City,
		arg.State,
		arg.Country,
		arg.Zipcode,
		arg.Position,
		arg.SocialMediaProfiles,
		arg.Notes,
		arg.TaxationDetailID,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.ContactType,
		&i.FirstName,
		&i.LastName,
		&i.CompanyName,
		&i.CompanyID,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.Zipcode,
		&i.Position,
		&i.SocialMediaProfiles,
		&i.Notes,
		&i.TaxationDetailID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts WHERE id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteContact, id)
	return err
}

const getContact = `-- name: GetContact :one
SELECT id, contact_type, first_name, last_name, company_name, company_id, email, phone, address, city, state, country, zipcode, position, social_media_profiles, notes, taxation_detail_id, created_at, updated_at FROM contacts WHERE id = $1
`

func (q *Queries) GetContact(ctx context.Context, id int32) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContact, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.ContactType,
		&i.FirstName,
		&i.LastName,
		&i.CompanyName,
		&i.CompanyID,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.Zipcode,
		&i.Position,
		&i.SocialMediaProfiles,
		&i.Notes,
		&i.TaxationDetailID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listContacts = `-- name: ListContacts :many
SELECT id, contact_type, first_name, last_name, company_name, company_id, email, phone, address, city, state, country, zipcode, position, social_media_profiles, notes, taxation_detail_id, created_at, updated_at FROM contacts
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListContactsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListContacts(ctx context.Context, arg ListContactsParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, listContacts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.ContactType,
			&i.FirstName,
			&i.LastName,
			&i.CompanyName,
			&i.CompanyID,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.City,
			&i.State,
			&i.Country,
			&i.Zipcode,
			&i.Position,
			&i.SocialMediaProfiles,
			&i.Notes,
			&i.TaxationDetailID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
SET first_name=$2, last_name=$3, phone=$4, address=$5, city=$6, state=$7, country=$8, zipcode=$9,
    position=$10, social_media_profiles=$11, notes=$12, updated_at=CURRENT_TIMESTAMP
WHERE id=$1
RETURNING id, contact_type, first_name, last_name, company_name, company_id, email, phone, address, city, state, country, zipcode, position, social_media_profiles, notes, taxation_detail_id, created_at, updated_at
`

type UpdateContactParams struct {
	ID                  int32
	FirstName           sql.NullString
	LastName            sql.NullString
	Phone               sql.NullString
	Address             sql.NullString
	City                sql.NullString
	State               sql.NullString
	Country             sql.NullString
	Zipcode             sql.NullString
	Position            sql.NullString
	SocialMediaProfiles sql.NullString
	Notes               sql.NullString
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.Address,
		arg.City,
		arg.State,
		arg.Country,
		arg.Zipcode,
		arg.Position,
		arg.SocialMediaProfiles,
		arg.Notes,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.ContactType,
		&i.FirstName,
		&i.LastName,
		&i.CompanyName,
		&i.CompanyID,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.City,
		&i.State,
		&i.Country,
		&i.Zipcode,
		&i.Position,
		&i.SocialMediaProfiles,
		&i.Notes,
		&i.TaxationDetailID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
